// License Information:
// src/Tricky Script/Script/Subs/SubParty.neil
// Version: 22.04.11
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/xmath"
#use "script/use/anyway"
#use "script/use/misc/box"

#macro __BoxPosY Screen.H - 138

Group SubParty

	Get Var Mouse 
		Return Any.Mouse
	End
	
	ReadOnly Var Stats
	
	Int ToNumber(anything)
		return Lua.tonumber(anything) || 0
	End
	
	void GrabLevel(string tag,int level)
		string n = tag
		//string dat = JCR6.LoadString(sprintf("Data/LvData/%s/%d",n,math.floor((level-1)/500)))
		string dat = JCR6.LoadString(sprintf("Data/Characters/%s/LvData/%d",n,math.floor((level-1)/500)))		
		table tdat = Split(dat,"\n")
		int lvl = -100
		for line in each(tdat)
			if Trim(line)!="" 
				table ins = split(line," ")
				switch ins[1]
					case "REM"
						// DO NOTHING!
					case "LEVEL"
						lvl = lua.tonumber(ins[2])
					default
						if prefixed(ins[1],"STAT.") 
							if lvl==level
								string st = right(ins[1],#ins[1]-5)
								RPGChar[Tag].Stat["BASE_"..st] = tonumber(ins[2])
								// This is to make sure this is properly set up
								RPGChar[Tag].Stat["BUFF_"..st] = RPGChar[Tag].Stat["BUFF_"..st]
								RPGChar[Tag].Stat["PERM_"..st] = RPGChar[Tag].Stat["PERM_"..st]
								RPGChar[Tag].Stat["EQUI_"..st] = RPGChar[Tag].Stat["EQUI_"..st]
								RPGChar[Tag].StatScript["END_"..st] = "SUM:"..Tag..".BASE_"..st..".BUFF_"..st..".PERM_"..st.."."
								RPGChar[Tag].Stat.Level=level
								print("\t= "..st.." for "..tag.." is "..ins[2])
							end
						else
							Lua.error("Unknown instruction! >> "..line)
						end
				end
			end
		end
		RPGChar[tag].Points.HP.Have = RPGChar[tag].Points.HP.Maximum

	End

	Void CreateCharacter(string ch,int level)
		CSayF("Request to create character %s at level %d",ch,level)
		Switch ch
			Case "Z_Wendicka" "Z_Sue" "Z_Admiral"
				RPGChar.Create(Ch)
				RPGChar[ch].Data.Used="False"
				RPGChar[Ch].Stat.Level = 1
				RPGChar[Ch].Name = Replace(ch,"Z_","")
				If ch=="Z_Admiral"
					RPGChar[ch].Name = "Ashley"
				End
				CSayF("Unused character %s created",ch)				
				Return
			Default
				RPGChar.Create(Ch)
				RPGChar[Ch].Points.HP.MaxCopy = "END_HP"
				RPGChar[Ch].Points.AP.MaxCopy = "END_AP"
				RPGChar[Ch].Points.EXP.Maximum = Any.Caps.ExpNeeded
				RPGChar[ch].Data.Used="True"
				For R in Each{"Status","Elements"}
					For RS in Each(Any.Resistance[R])
						string st="Z"..left(R,1).."R_"..RS
						RPGChar[Ch].Stat["BASE_"..st] = 0
						RPGChar[Ch].Stat["BUFF_"..st] = 0
						RPGChar[Ch].Stat["PERM_"..st] = 0
						RPGChar[Ch].Stat["EQUI_"..st] = 0					
						RPGChar[Ch].StatScript["END_"..st] = "SUM:"..Ch..".BASE_"..st..".BUFF_"..st..".PERM_"..st.."."
						If R=="Status" && RS!="None"
							RPGChar[Ch].Stat["BASE_"..st] = Math.random(__skill,25*__skill)
						End
					End
				End
				RPGChar[Ch].Stat["BASE_Luck"] = 0
				RPGChar[Ch].Stat["BUFF_Luck"] = 0
				RPGChar[Ch].Stat["PERM_Luck"] = 0
				RPGChar[Ch].Stat["EQUI_Luck"] = 0					
				RPGChar[Ch].StatScript["END_Luck"] = "SUM:"..Ch..".BASE_Luck"..".BUFF_Luck"..".PERM_Luck".."."
				Lnk.Party.LuckRoll(Ch)
				GrabLevel(ch,level)
				If Ch!="Asley" 
					RPGChar[Ch].Points.AP.Have = RPGChar[Ch].Points.AP.Maximum
				End
				CSayF("Character %s created at level %d",ch,level)
		End
	End
	
	Table LvScale = {}
	Void Boxes(string HLChar,bool nohover)
		static var Fnt = ImageFont.Obtain("MINITEXT")
		__Black
		Graphics.Rect(0,Screen.H-50,Screen.W,50)
		__White
		lnk.Ach.Show()
		Static Table Boxes = { new Box(0,__BoxPosY,20,100,false),new Box(0,__BoxPosY,20,100,false),new Box(0,__BoxPosY,20,100,false),new Box(0,__BoxPosY,20,100,false)}
		Int C  = lnk.Party.Count
		Int M3 = 0
		Int W = Screen.W Div C
		Int Hover=0		
		Graphics.Scale(1,1)
		If C==3
			M3 = Screen.W % 3
		End
		Lua.assert(C>0,"Empty party")
		For i=1,C
			String Ch = RPGParty[i]
			Int W2 = W
			if i==3
				W2+=M3
			End
			LvScale[Ch] = LvScale[Ch] || 0
			// Background Box
			Boxes[i].X = (W*(i-1))
			Boxes[i].Y = __BoxPosY
			Boxes[i].W = W2
			Boxes[i].H = 100
			Boxes[i].Draw()

			if (!Prefixed(CH,"Z_"))
				if LvScale[Ch]>0  
					LvScale[Ch] = (LvScale[Ch]+1) % 2500
					//Graphics.SetScale(math.min(LvScale[Ch] / 500,1))
					//ImgLevelUp.Draw(Boxes[i].X+(Boxes[i].W div 2),Boxes[i].Y-5)
				End
				If RPGChar[Ch].Stat.Level<Any.Caps.LevelCap && RPGChar[Ch].Stat.Experience<=0
					//ImgLevelUp.HotBottomCenter()
					//AudLevelUp.Play()
					//LvScale[Ch]=1
					//RPGChar[Ch].Stat.Level++
					//Grablevel(Ch,RPGChar[Ch].Stat.Level)
					//RPGChar[ch].Stat.Experience += EXP.ByLevel(RPGChar[Ch].Stat.Level)
					//RPGChar[ch].Points.HP.Have     = RPGChar[ch].Points.HP.Maximum
					//RPGChar[ch].Points.VIT.Have    = RPGChar[ch].Points.VIT.Maximum
				End
			End
			If Mouse.MX>Boxes[i].X && Mouse.MY>Boxes[i].Y && Mouse.MX<Boxes[i].X+Boxes[i].W && Mouse.MY<Boxes[i].Y+Boxes[i].H && (!nohover)
				Hover=i
				__Ember
				Graphics.SetAlpha(50)
				Graphics.Rect(Boxes[i].X,Boxes[i].Y,Boxes[i].W,Boxes[i].H)
				Graphics.SetAlpha(255)
			End
			Var B=Boxes[i]
			// Portrait
			__White
				If ch==HLChar
					plua alf = math.abs(math.floor(xmath.sin(FPS.Ticks/50)*255))
					//CSayF("Alpha: %03d / Tricks: %05d",alf,FPS.Ticks)
					Graphics.SetAlpha(alf)
				end
			lnk.Party.Portrait(ch,B.X+40,Screen.H-40)
			Graphics.SetAlpha(255)
			if !prefixed(ch,"Z_")
				// Bars			
				Int barx = B.X + 100
				Int barwidth = B.W-110			
				// HP
				Do
					Var HP = RPGChar[ch].Points.HP
					Number Breuk = HP.Have / HP.Maximum
					Int HPG = math.floor(255*Breuk)
					Int HPR = math.floor(255 - HPG)
					Int HBR = Math.floor(barwidth*Breuk)
					// print(HPR,HPG,0)
					Graphics.Color(50,50,50)
					Graphics.Rect(barx,B.Y+25,barwidth,10)
					Graphics.Color(HPR,HPG,0)
					Graphics.Rect(barx,B.Y+25,HBR,10)
					Fnt.DarkText("HP",barx,B.Y+35,1,1)
					Fnt.DarkText(HP.Have,barx+barwidth,B.Y+35,1,1)
				End
				// AP
				If RPGChar[ch].Points.AP.Maximum>0
					Var AP = RPGChar[ch].Points.AP
					Number Breuk = AP.Have / AP.Maximum
					//Int APG = math.floor(180*Breuk)			
					//Int ABB = 255
					Int ABR = Math.floor(barwidth*Breuk)
					// print(APR,APG,0)
					string N="???"
					Graphics.Color(50,50,50)
					Graphics.Rect(barx,B.Y+50,barwidth,10)					
					//Graphics.Color(0,APG,ABB)
					Switch Ch
						case "Klahre" 
							Lua.error("Klahre AP!")
						case "Yorno" "Doctor" 
							Graphics.Color(255,255,0)
							N="NRGY"
						case "Ashley"
							Graphics.Color(255,0,0)
							N="RAGE"
						Default
							Graphics.color(0,0,255)
					End
					Graphics.Rect(barx,B.Y+50,ABR,10)
					Fnt.DarkText(N,barx,B.Y+60,1,1)
					Fnt.DarkText(AP.Have,barx+barwidth,B.Y+60,1,1)
					If gv.gbool.Cheat_Merlin
						AP.Have++
					End
				End
				// Experience
				If RPGChar[ch].Stat.Level<Any.Caps.LevelCap
					Var XP = RPGChar[ch].Points.EXP
					Number Breuk = XP.Have / XP.Maximum
					Int ABR = Math.floor(barwidth*Breuk)
					Graphics.Color(50,50,50)
					Graphics.Rect(barx,B.Y+75,barwidth,10)
					Graphics.Color(255,255,255)
					Graphics.Rect(barx,B.Y+75,ABR,10)
				End
				Fnt.DarkText("Lv",barx,B.Y+85,1,1)
				Fnt.DarkText(RPGChar[ch].Stat.Level,barx+barwidth,B.Y+85,1,1)
			End
		End
		If Mouse.ML && Hover>0 && (!nohover)
			State.Call(Flow.Current,"PartyClick",sprintf("%d,\"%s\"",Hover,RPGParty[Hover]))
		End
	End

	Constructor
		Stats = {}
	End
End