// License Information:
// src/Tricky Script/Script/Flow/FlowConsole.neil
// Version: 22.03.24
// Copyright (C) 2020, 2021, 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#pragma debug

#use "script/use/anyway"
//#use "script/use/link"

table icommandtable

class CLine
	// delete oldest lines if it becomes more than this!
	const int maxlines = 400
	// Text Height
	const int thght = 25
	readonly string line
	readonly byte R
	readonly byte G
	readonly byte B
	readonly static get table commands 
		return icommandtable
	end
	static readonly var SFont = ImageFont.Obtain("SYSFONT")
	static int scrolly = 0

	var next
	var prev
	
	static var first
	static var last
	
	static string ReturnToFlow
	
	static get delegate Each
		var d = first
		var r()
			if not d
				return nil
			end
			var n = d
			d = d.next
			return n
		end
		return r
	end
	
	static get delegate RevEach
		var d = last
		var r()		
			if not d
				return nil
			end
			var n = d
			d = d.prev
			return n
		end
		return r
	end
	
	static get int Count
		int ret = 0
		for _ in Each
			ret++
		end
		return ret
	end
	
	CONSTRUCTOR(string nl,int nr=255,int ng=255,int nb=255)
		line = nl
		r = nr
		g = ng
		b = nb
		if last
			prev = last
			prev.next = self
		end
		first = first || self
		last = self
		if count>maxlines
			first = first.next
			first.prev=nil
		end
		scrolly = 0
	end
	
	static void Write(string nl,int nr=255,int ng=255,int nb=255)
		// This shouldn't be a problem, but neil is not yet perfect, you know!		
		var voider = new CLine(nl,nr,ng,nb)
	end
	
	static void DoCommandCallBack(cmd,para)
		string dpara = "\""..cmd.."\", {"
		for i,v in ipairs(para)
			if i>1 
				dpara += ", "
			end
			dpara += "\""..v.."\""
		end
		dpara += "}"
		State.Call(ReturnToFlow,"Dev.CommandCallBack",dpara)
	end

	static void DoCommand(string command)
		table chopped
		bool escape = false
		bool instring = false
		string w
		Write(">"..command,255,255,0)
		for i=1,#command
			string ch = Mid(command,i,1)
			switch ch
				case "\""
					if not escape 
						if not instring
							w = Trim(w)
						end
						instring = not instring
						chopped += w
						w = ""
					else
						w += ch
						escape = false
					end
				case "\\"
					if escape
						w += "\\"
						escape = false
					else
						escape = true
					end
				case " "
					if instring
						w += " "
					else
						if w!=""
							chopped += w
							w = ""
						end
					end
				default
					w += ch
			end
		end
		if w!="" 
			chopped += w
		end
		string opdracht = chopped[1]:upper()
		table para
		for i=2,#chopped
			para[i-1]=chopped[i]
		end
		if commands[opdracht]
			if lua.type(commands[opdracht]) != "function"
				CLine.Write("Command '"..opdracht.."' does not contain a function by a "..lua.type(commands[opdracht]),255,0,180)
			else
				commands[opdracht](para)
			end
		else
			DoCommandCallBack(opdracht,para)
		end
	end

	static void RFlow()		
		static string command = ""
		int y = Screen.H - (thght*2)
		bool allowscrollup = false
		for l in RevEach
			int dy = y+scrolly
			if dy>-(thght)
				Graphics.Color(l.r,l.g,l.b)
				SFont.Text(l.line,3,dy)
			else
				allowscrollup=true
			end
			y -= thght
		end
		Graphics.Color(0,180,255)
		Graphics.Rect(0,Screen.H-thght,Screen.W,thght)
		Graphics.Color(255,255,0)
		SFont.Text(">"..command.."_",3,Screen.H-thght)
		if Events.KeyHit(27)
			Flow.GoToFlow(ReturnToFlow)
		end
		if Events.KeyHit(8) and command!=""
			command = left(command,#command-1)
		end
		if Events.KeyHit(13) and trim(command)!=""
			DoCommand(command)
			command=""
		end
		for ch=32,122
			if Events.KeyHit(ch)
				if Events.KeyDown(Any.Key.LeftShift) or Events.KeyDown(Any.Key.RightShift)
					switch ch
						case '1'
							command += "!"
						case '2'
							command += "@"
						case '3'
							command += "#"
						case '4'
							command += "$"
						case '5'
							command += "%"
						case '6'
							command += "^"
						case '7'
							command += "&"
						case '8'
							command += "*"
						case '9'
							command += "("
						case '0'
							command += ")"
						case '='
							command += "+"
						case '`'
							command += "~"
						case ';'
							command += ":"
						case 39
							command += "\""
						case ','
							command += "<"
						case '.'
							command += ">"
						case '/'
							command += "?"
						default
							command += Chr(ch):upper()
					end
				else
					command += Chr(ch)
				end
			end
		end		
	end
	
	static void SetRetFlow(string RF)
		ReturnToFlow = RF
	end

end

void FoulLanguage()
	CLine.Write("Hey! What kind of talk is that?",255,0,180)
end

void Bye()
	Flow.Quit()
end

VOID ToggleGod()
	gv.gBool["CHEAT.GOD"]=!gv.gBool["CHEAT.GOD"]
	CSayF("God mode: %s",Lua.tostring(gv.GBool["CHEAT.GOD"]))
end

VOID ShowGV()
	Plua Tab = GV.DumpTable
	For i,l in ipairs(Tab)
		int G = math.floor( (i/#Tab)*255)
		int R = 255-G
		CLine.Write(l,R,G,0)
		Cout("VARS>",l,"\n")
	End
End

deftable icommandtable
	FUCK = FoulLanguage
	SHIT = FoulLanguage
	POOP = FoulLanguage
	CUNT = FoulLanguage
	DICK = FoulLanguage
	JEROEN = void()
		CLine.Write("Hey! That's me!",255,180,0)
	end
	BYE = Bye
	EXIT = Bye
	QUIT = Bye
	HOUDOE = Bye
	FPS = void()
		Cline.Write(FPS.S,255,180,100)
	end
	LEAVEMEBE = void()
		gv.gBool.LeaveMeBe = !gv.gBool.LeaveMeBe
		CSayF("Leave me be: %s",Lua.tostring(gv.GBool.LeaveMeBe))
	end
	JACKTHERIPPER = void()
		gv.vbool["CHEAT.JACK"] = !gv.vbool["CHEAT.JACK"]
		CSayF("Jack the Ripper: %s",Lua.tostring(gv.vbool["CHEAT.JACK"]))
	end
	VARS = ShowGV
	IDDQD = ToggleGod
	GOD = ToggleGod
	STATLIST = void(table chrs)
		for ch in each(chrs)
			table s = Split(RPGChar[ch].StatList,"\n")
			for l in each(s)
				//print(l)
				CSay(l)
			end
		end
	end
	NIM = void()
		Static Delegate SNIM
		SNIM = SNIM || NeilUse("Script/Use/Misc/GoToNIM")
		SNIM("DEBUG")
	end
	WHIZZY = void()
		gv.gBool["CHEAT.REGEN"]=!gv.gBool["CHEAT.REGEN"]
		CSayF("Whizzy mode: %s",Lua.tostring(gv.GBool["CHEAT.REGEN"]))
	End
	DUMBLEDORE = void()
		gv.gBool["CHEAT.DUMBLEDORE"]=!gv.gBool["CHEAT.DUMBLEDORE"]
		CSayF("Dumbledore mode: %s",Lua.tostring(gv.GBool["CHEAT.DUMBLEDORE"]))
	End
	ALLCHARS = void()
		Table AC = RPGChar.All
		For i,tag in iPairs(AC)
			Int b = math.floor( (i/#AC) * 255)
			Int r = 255 - b
			Int g = 180
			CLine.Write(Tag,r,g,b)
		End
		CLine.Write(sprintf("Total characters loaded: %d",#AC),180,255,180)
	End	
end


init
	var a = new CLine("Star Story - Debug Console",255,180,0)
	a = new CLine("(c) Jeroen P. Broks",180,0,255)
end

global delegate Apollo_Flow = CLine.RFlow