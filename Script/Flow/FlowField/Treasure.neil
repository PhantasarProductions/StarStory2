// License Information:
// src/Tricky Script/Script/Flow/FlowField/Treasure.neil
// Version: 22.05.13
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

	Var TreasureData
	Var Treasures
	
	Int V(string s)
		Return Lua.tonumber(s) || 0
	End
	
	Int V2(string item,string key)
		string ittag = sprintf("ITEM:%s",item)
		string kytag = sprintf("%s%d",key,__skill)
		string sval  = TreasureData.Value(ittag ,kytag)
		int ret = V(sval)
		CSayF("= Value check: Data['%s','%s']=(int)%d/(string)%s",ittag,kytag,ret,sval)
		Return ret 
	End
	
	Void Load(string MapBundle)
		TreasureData = GINIE.Load("Kthura/"..MapBundle.."/Treasures","TREASURES")
		Treasures = {}
		For tr in TreasureData.ListEach("Main","List")
			Int Rate = V2(tr,"Rate")
			Int MinCycle = V2(tr,"MinCycle")
			CSayF("Item '%s', Rate: %d, Minimal cycle: %d!",tr,rate,mincycle)
			If Rate>0 && MinCycle<=Any.Caps.Cycle
				For cnt=1,Rate
					Treasures += tr
				End
			End
		End
		Lua.assert(#Treasures>0,"No treasures")
	End

	Void RandomTreasure(string tag)
		// Placeholder
		CSayF("Request to pick up random treasure '%s' received!",tag)
		String iTag = FlowField.Map.CurLayer.Obj(Tag).Data.Treasure
		If Any.IAA.Give(iTag)
			Lnk.Party.MiniMsg(sprintf("%s obtained",Any.IAA[iTag].Title),0,180,255)
			Lnk.Map.Kill(Tag)
		Else
			Lnk.Party.MiniMsg(sprintf("Failed to pick up %s!",Any.IAA[iTag].Title),255,0,0)
		End	
	End
	
	Void Chest(string tag)
		// TODO: Check Sein (if applicable)
		String it = TreasureData.Value(Tag,"ITEM")
		if prefixed(it,"CASH:")
			Int Cash = Lua.tonumber(right(it,#it-5))||(5-__skill)
			Any.Aurina.ChaChing.Play()
			Lnk.Party.MiniWrt(sprintf("%d aurinas ",cash),0,180,255)
			Lnk.Party.MiniMsg("obtained",255,255,0)
			Any.Aurina.Have+=cash
			Lnk.Map.Kill(Tag,true)
			Return
		elseif prefixed(it,"SHIL:")
			Int Cash = Lua.tonumber(right(it,#it-5))||(5-__skill)
			Any.Aurina.ChaChing.Play()
			Lnk.Party.MiniWrt(sprintf("%d shilders ",cash),0,180,255)
			Lnk.Party.MiniMsg("obtained",255,255,0)
			Any.Aurina.HaveShilders+=cash
			Lnk.Map.Kill(Tag,true)
			Return
		End
		Var itm = any.iaa[it]
		if (!Itm.Give)
			Buzz.Play()
			Lnk.Party.MiniMsg("You are carrying too many things",255,0,0)
		Else
			Lnk.Party.MiniWrt(Itm.Title,0,255,0)
			Lnk.Party.MiniMsg(" obtained",255,255,0)
			Lnk.Map.Kill(Tag,true)
		End
	End
	
	void CreateRandomTreasure(string T,string Layer)
		Static Int Cnt = 0
		If math.random(1,(__skill+1)^2)!=1
			CSayF("Random treasure '%s' in layer '%s' rejected",T,Layer)
			Return
		End
		Var Lay = FlowField.Map.KthuraMap.Layer(Layer)
		String Tag
		Repeat
			Tag = sprintf("PAKSCHAT_%0X",cnt)
			Cnt++
			Cnt=math.max(0,Cnt) // Should not be needed as more than 2 billion treasures is what it takes to make this needed, which leads me to the question if you haven't been playing for too long.			
		LoopWhile Lay.HasTag(Tag)
		Var P = Lay.Obj(T)
		Var O = Lay.NewObj("Obstacle",Tag)
		O.X = P.X
		O.Y = P.Y
		O.Visible = P.Visible
		O.Alpha=255
		O.Texture = "GFX/Treasure/Bag.png"
		O.Label = P.Label
		O.Data.Treasure = Treasures[math.random(1,#Treasures)]
		FlowField.Clickable.Create(Layer,Tag,O.X,O.Y,RandomTreasure,Tag)
		CSayF("Random treasure '%s' in layer '%s' created: %s (%04d,%04d)",T,Layer,O.Data.Treasure,O.X,O.Y)
	End

End