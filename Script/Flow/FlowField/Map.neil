// License Information:
// src/Tricky Script/Script/Flow/FlowField/Map.neil
// Version: 22.04.13
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

	Var KthuraMap
	String Layer
	Bool MSDraw 
	Bool MSUpdate
	Int ScrollX
	Int ScrollY
	Int GoToX
	Int GoToY
	//Bool AllowAutoScroll 
	Link AllowAutoScroll = gv.gbool.AllowAutoScroll
	Var ArriveFunc = Nil
	String ArriveParam 
	Var ActorWind
	
	Get Var Clickable
		Return FlowField.Clickable
	End
	
	Get String LoadedMap
		Return gv.gstr.LoadedMap
	End
	Set String LoadedMap
		gv.gstr.LoadedMap=value
	End
	
	
	Get Var CurLayer		
		Return KthuraMap.Layer(Layer)
	End
	
	Get Var CurrentLayer
		Return CurLayer
	End
	
	Get Var OPlayer
		Return CurLayer.Obj(FlowField.FollowTheLeader.LeaderMapTag)
	End
	
	Get Table ActorWindDefault
		Var Ret
		Ret = {}
		for i=1,4
			Ret["PLAYER"..i]={["W"]="Auto",["T"]=RPGParty[i]}
		end
		return Ret
	End
	
	Void AutoTex()
		ActorWind = ActorWind || ActorWindDefault
		For k,_w in pairs(ActorWind)
			if CurLayer.HasTag(k)
				string w = _w.W				
				if w=="Auto"
					w = CurLayer.Obj(k).Wind
				end
				if _w.OT!=w
					CurLayer.Obj(k).Texture=sprintf("GFX/Actors/%s.%s.jpbf",_w.T,w)
					_w.OT=w
				End
			End
		End
		// Placeholder
	End
	
	Get Int MinScrollX
		return Lua.tonumber(FlowField.Layers.Data("Scroll_MinX")) || 0
	End
	Get Int MinScrollY
		return Lua.tonumber(FlowField.Layers.Data("Scroll_MinY")) || 0
	End
	Get Int MaxScrollX
		return Lua.tonumber(FlowField.Layers.Data("Scroll_MaxX")) || 0
	End
	Get Int MaxScrollY
		return Lua.tonumber(FlowField.Layers.Data("Scroll_MaxY")) || 0
	End
	Get Int CenScrollX
		return Lua.tonumber(FlowField.Layers.Data("Scroll_CenX")) || 0
	End
	Get Int CenScrollY
		return Lua.tonumber(FlowField.Layers.Data("Scroll_CenY")) || 0
	End	
	
	Void AutoScroll()
		If (!gv.gbool.AllowAutoScroll) || (!CurLayer.HasTag(FlowField.FollowTheLeader.LeaderMapTag)) 
			Return
		End
		ScrollX = OPlayer.X - (Screen.W div 2)
		ScrollY = OPlayer.Y - (Screen.H div 2)		
		if MaxScrollX==0 || MaxScrollY==0
			Return
		end
		ScrollX = math.min(MaxScrollX+Screen.W,math.max(ScrollX,MinScrollX))
		ScrollY = math.min(MaxScrollY+Screen.H,math.max(ScrollY,MinScrollY))
		//If ScrollX<MinScrollX
		if (MaxScrollX-MinScrollX<Screen.W)
			ScrollX = CenScrollX-(Screen.W div 2)
		End
		//If ScrollY<MinScrollY
		if (MaxScrollY-MinScrollY<Screen.H)
			ScrollY = CenScrollY-(Screen.H div 2)
		End
	End
	
	Get Var Player
		if !CurrentLayer.HasTag(FlowField.FollowTheleader.LeaderMapTag)
			Return nil
		End
		Return CurrentLayer.Obj(FlowField.FollowTheleader.LeaderMapTag)
	End
	
	Void ObjSet(TID,String Key,Value)
		CurrentLayer.Obj(TID)[Key]=Value
	End
	
	Void Walking()
	End
	
	Get Int MapLevel
		Int R = Lua.tonumber(KthuraMap.Meta.MapLevel) || 0
		If Any.Caps.Cycle<2
			Return R
		End
		Return math.min(100000,math.ceil( (R/Any.Caps.MaxLevel) * 250 ) )
	End
	
	void SG()
		//SaveGame.Data["PermaKills.NEIL"] = FieldFlow.Kill.Serialize
		string r = "// Mapstuff\nInit\n"		
		r += "\tFlowField.Map.ScrollX = "..tostring(FlowField.Map.ScrollX).."\n"
		r += "\tFlowField.Map.ScrollY = "..tostring(FlowField.Map.ScrollY).."\n"
		r += "\tFlowField.Map.AllowAutoScroll = "..tostring(FlowField.Map.AllowAutoScroll).."\n"
		r += "\tFlowField.Map.Layer = \""..FlowField.Map.Layer.."\"\n"
		//r += "\tFlowField.Map.CurLayer.Spawn(\"PLAYER\",0,0)\n"
		//r += "\tFlowField.Map.Player.X = ".tostring(FlowField.Map.Player.X).."\n"
		//r += "\tFlowField.Map.Player.Y = ".tostring(FlowField.Map.Player.Y).."\n"
		//r += "\tFlowField.Map.Player.Wind = \"".FlowField.Map.Player.Wind.."\"\n"
		For i=1,4
			If CurLayer.HasTag("PLAYER"..i)
				Var P = CurLayer.Obj("PLAYER"..i)
				r += sprintf("\tFlowField.Map.CurLayer.Spawn(\"PLAYER%d\",0,0)\n",i)
				r += sprintf("\tFlowField.Map.CurLayer.Obj(\"PLAYER%d\").X = %d\n",i,P.X)
				r += sprintf("\tFlowField.Map.CurLayer.Obj(\"PLAYER%d\").Y = %d\n",i,P.Y)
				r += sprintf("\tFlowField.Map.CurLayer.Obj(\"PLAYER%d\").Wind = \"%s\"\n",i,P.Wind)
			End
		End
		r += "end\n"
		SaveGameData["Map.neil"] = r
	End
	
	Void LG()
		CSay("Loading Kthura Map: "..LoadedMap)
		FlowField.LoadMap(LoadedMap)
		Loading()
		CSay("Parsing player positions from savegame") 
		NeilDoString(SaveGame.Data["MAP.NEIL"],"SG:Map.Neil")
	End
	
	Void WalkClick(Int mX, Int mY)		
		int x = mx + ScrollX
		int y = my + ScrollY
		CSayF("Request to walk to (%4d,%4d); Mouse(%4d,%4d); Scroll(%4d,%4d)",x,y,mx,my,ScrollX,ScrollY)
		if !CurLayer.HasTag(FlowField.FollowTheLeader.LeaderMapTag)
			CSay("But there is no player available now, so the request will be ignored!")
			return
		end				
		if !Clickable.All(x,y)
			CurLayer.Obj(FlowField.FollowTheLeader.LeaderMapTag).WalkTo(x,y)
			ArriveFunc = nil
			ArriveParam = ""
		End	
	End
	
	Void StopWalking()
		if !CurLayer.HasTag(FlowField.FollowTheLeader.LeaderMapTag)
			Return
		End		
		CurLayer.Obj(FlowField.FollowTheLeader.LeaderMapTag).StopWalking()
		ArriveFunc = nil
		ArriveParam = ""
	End	
	
	Void CBLoadMap(string MapBundle)
		ActorWind = ActorWindDefault
		//AllowAutoScroll = true
		LoadedMap = MapBundle:upper()
		CSayF("= Loading Kthura Map: %s",MapBundle)
		KthuraMap = Kthura.Load("Kthura/"..MapBundle)
		KthuraMap.Remap()
		Layer = KthuraMap.Layers[1]
		gv.gStr.MapTitle = KthuraMap.Meta.Title
		gv.gbool.AllowAutoScroll = True
	End

End