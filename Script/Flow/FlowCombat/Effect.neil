// License Information:
// src/Tricky Script/Script/Flow/FlowCombat/Effect.neil
// Version: 22.08.20
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Const Var FX = UWN("Script/Use/Combat/Effect.uwn")

Group Effect

	Var Act
	
	Get Var iAct
		Return Act.Act
	End
	
	Get Var Executor
		Return Act.Executor
	End
	
	Get Var Luck
		return Any.Luck
	End
	
	Int XRoll(int a,b,c)
		Return Luck.Roll(Executor.Tag,a, b,c)
	End
	
	String TarTag
	Get Var Target
		Return Fighter.ByTag[TarTag]
	End
	
	Int TRoll(int a,b,c)
		Return Luck.Roll(TarTag,a, b,c)
	End
	
	String ShowDmg(int dmg)
		If dmg<25000
			return sprintf("%d",dmg)
		ElseIf dmg<25000000
			return sprintf("%dK",dmg div 1000)
		Else
			return sprintf("%dM",dmg div 1000000)
		End
	End
	
	Void Hurt(Tar,int dmg,string elem="None")
		If Lua.type(Tar)=="string"
			Hurt(Fighter.ByTag[Tar],dmg,elem)
			Return
		End
		if elem==""
			elem="None"
		end
		Int TrueDmg
		//Int Res = math.max(0,math.min(Tar.Char.Stats["END_ZER_"..Elem],6))
		Int Res = Tar.EleRes(Elem)
		CSayF("Target %s gets %d damage from element: %s",Tar.CharTag,dmg,elem)
		Switch math.min(6,math.max(0,Res))
			case 0
				// FATAL
				charmsg(Tar.CharTag,"Death!",255,0,0)
				TrueDmg = Tar.HPMax
			case 1
				// Very Weak
				TrueDmg = math.ceil(math.max(4,Dmg*4.1)) // The .1 is to make sure the damage is not always dividable by 4.
				charmsg(Tar.CharTag,ShowDmg(TrueDmg),255,0,0)
			case 2
				// Weak
				TrueDmg = math.ceil(math.max(2,Dmg*2.1)) // The .1 is to make sure the damage is not always dividable by 2.
				charmsg(Tar.CharTag,ShowDmg(TrueDmg),255,100,100)
			case 3
				// Neutral
				TrueDmg = Dmg
				charmsg(Tar.CharTag,ShowDmg(TrueDmg),255,255,255)
			case 4
				// Resistent
				TrueDmg = math.ceil(math.max(1,Dmg div 2))
				charmsg(Tar.CharTag,ShowDmg(TrueDmg),255,255,0)
			case 5
				TrueDmg = 0
				charmsg(Tar.CharTag,"No Effect",255,255,0)
			case 6
				charmsg(Tar.CharTag,ShowDmg(Dmg),0,255,0)
				TrueDmg = -Dmg
			Default
				// Nothing should make it possible this happens, but just in case!
				Lua.error("Unknown elemental resistance number: "..Res)
		End
		if TrueDmg>0 && Tar.Guarding
			TrueDmg = math.ceil(TrueDmg * Tar.GuardModifier)
		End
		Tar.Char.Points.HP.Have -= TrueDmg
		if gv.vbool["CHEAT.JACK"] && Tar.Team=="Foe" && TrueDmg>0
			Tar.Char.Points.HP.Have = 0
			CSay("Jack the Ripper did strike! Instant kill1")
		End
		CSayF("%s takes %d damage and has %d HP left!",Tar.CharTag,TrueDmg,Tar.Char.Points.HP.Have)
		If Tar.CharTag=="Ashley"
			Tar.Char.Points.AP.Have += math.ceil( (TrueDmg/Tar.Char.Points.HP.Maximum) * (50 / __skill)) + (24 div __skill)
			if Tar.Char.Points.HP.Have==0
				Tar.Char.Points.AP.Have = 0
			End
			CSayF("Ashley's rage after being attacked has been set to %d",Tar.Char.Points.AP.Have)
		ElseIf Tar.Team=="Hero" && RPGParty.Has("Ashley") && Fighter.ByTag.Ashley && Fighter.ByTag.Ashley.HP>0
			Var Ash = Fighter.ByTag.Ashley
			Ash.Char.Points.AP.Have += math.ceil( (TrueDmg/Ash.Char.Points.HP.Maximum) * (12 / __skill))
			CSayF("Ashley's rage after one of her allies has been attacked has been set to %d",Tar.Char.Points.AP.Have)
		End
	End
	
	Get Bool Hit
		If !iAct.Check_Accuracy
			Return True
		End
		If iAct.ARM && Executor.Tag=="Klahre"
			//Lua.error("ARMS hit check not yet implemented")
			Int R = XRoll(0,100,False)
			Return R<=Abl.Klahre.Map[iAct.Tag]
		End
		Int Acc = XRoll(Executor.EndStats.Accuracy div 2,math.ceil(Executor.EndStats.Accuracy * 1.25))
		Int Eva = XRoll(  Target.EndStats.Evasion  div 4,math.ceil(  Target.EndStats.Evasion  * 1.15))
		CSayF("Accuracy check Acc:%d; Eva:%d  Result: %s",Acc,Eva,Acc>Eva)
		Return Acc>Eva
	End
	
	Get Bool Attack
		If iAct.Attack<=0
			Return False
		End
		Switch iAct.Attack_Type
			Case "Absolute" 
				Hurt(Target,iAct.Attack,iAct.Attack_Element)
			Case "PercentHP"
				Hurt(Target,math.ceil( (iAct.Attack/100) * Target.HP),iAct.Attack_Element)
			Case "PercentStat"
				Hurt(Target,math.ceil( (iAct.Attack/100) * Target.Stats[iAct.Attack_OffenseStat]),iAct.Attack_Element)
			Case "BattleStat"
				Int Atk1 = math.floor((Executor.EndStats[iAct.Attack_OffenseStat]*(iAct.Attack/100))*1.5)
				Int Atk2 = math.floor((Executor.EndStats[iAct.Attack_OffenseStat]*(iAct.Attack/100))*2.5)
				Int Def1 = math.floor(  Target.EndStats[iAct.Attack_DefenseStat]*0.75)
				Int Def2 = math.floor(  Target.EndStats[iAct.Attack_DefenseStat]*1.25)
				Int Atk = XRoll(Atk1,Atk2)
				Int Def = XRoll(Def1,Def1)
				Int Dmg = math.max(1,Atk-Def)
				Hurt(Target,Dmg,iAct.Attack_Element)
			Default
				Lua.error("Unknown attack type: "..iAct.Attack_Type)
		End
		Return True
	End
	
	Get Bool Cause
		Bool Ret = False
		For St in Each(Any.Resistance.StatusChanges)
			If iAct["Cause_"..St]
				Int Res=Target.EndStats["ZSR_"..Fighter.StChange[st].Resistance]
				Int Rol=Any.Luck.Roll(Target.CharTag,0,100)
				If Target.Team=="Foe" && Target.Boss && (St=="Death" || St=="Destruction")
					Res=100
				End
				CSayF("Roll for status: %s -> %03d (Resistance %03d%%",St,Rol,Res)
				If Rol<Res
					CSayF("-> Rejected!")				
				Else
					CSayF("-> Accepted!")
					Target.StatusChanges[st]=True
					charmsg(Target.CharTag,St,180,0,255)
					Ret = True
				End
			End
		End
		Return Ret
	End
	
	Get Bool XEXP
		If Target.Team!="Hero"
			Return False
		End
		Var X = Target.Char.Points.EXP 
		if iAct.X_Level
			X.Have = X.Maximum
			return true
		elseif iAct.X_Experience>0
			X.Have += iAct.X_Experience
			CSayF("%s gained %d extra experience points due to this move (total %d/%d)",Target.Tag,iAct.X_Experience,X.Have,X.Maximum)
			Return True
		Else
			Return False
		End
	End
		
	
	Bool Run(_Act,string _TarTag)
		Act      = _Act
		TarTag   = _TarTag
		Bool Ret = False
		If Hit			
			Ret = Attack || Ret
			Ret = XEXP || Ret
			If iAct.Effect_Script!=""
				ret = FX[iAct.Effect_Script](_Act,_TarTag,iAct.Effect_Param) || Ret
			End
			Ret = Cause || Ret
		End
		Return Ret
	End
End


return Effect