// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Flow/FlowCombat/CLASS_Fighter.neil
// (c) Jeroen Broks, 2022, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 22.06.03
// End License Information

#use "Libs/Fittext"

Class Fighter

#region Tags and stuff

	Static Var StChange = UWN("Script/Use/Combat/StatusChanges.uwn")

	String CharTag
	String Team
	Bool Guarding = False
	
	
	
	
	Table StatusChanges
	Table TrueStatusChanges
	
	Void InitStatusChanges(Initial)
		Static Var Func = {[true]="Cause", [false]="Cure"}
		TrueStatusChanges = {}
		If Initial
			for S in Each(Initial)
				TrueStatusChanges[S:upper()] = true
			End
		End
		
		void S(SF,string K,V)
			Bool Value = V!=nil && v!=false
			Bool Was   = TrueStatusChanges[K]!=nil && v!=false
			K = K:upper()
			TrueStatusChanges[K]=TrueStatusChanges[K] || True
			If Value!=Was
				StChange[K][Func[Value]](Self,K)
			End
		End
		
		Var G(SF,string k)
			If TrueStatusChanges[K:upper()]
				return StChange[K]
			else
				Return Nil
			End
		End
		StatusChanges = Lua.setmetatable({},{["__index"]=G, ["__newindex"]=S})
	End
	
	
	
	
	Get String Tag
		Return CharTag
	End
	
	Set String Tag
		CharTag = Value
	End
	
	Get Bool DrawThis
		Return True
	End
	
	Static Table ByTag = {}
	Static Table ByTeam = {}
	
	Static Table GetTags(string Team="*")
		Table Ret = {}
		For Tag,Dat in sPairs(ByTag)
			If Team=="*" || Team==Dat.Team
				Ret += Tag
			End
		End
		Return Ret
	End
	
	Static Void ClearAll()
		ByTag = {}
		ByTeam = {["Hero"] = {}, ["Foe"]={} }
	End
	
	Static Void ClearGroup(string _Gr)
		ByTag = {}
		For T,G in pairs(ByTeam)
			If T!=_GR
				For TG,DT in pairs(G)
					ByTag[TG]=DT
				End
			End
		End
		ByTeam[_Gr]={}
	End	
	
	Get Int Level
		Return Self.Char.Stat.Level
	End

#endregion
	

#region Positions

	
	// Seems odd, but this makes extra functions possible when expanding.
	Int _X
	Int _Y
	Int _W
	Int _H
	
	Get Int W
		Return _W
	End
	
	Get Int H
		Return _H
	End
	
	
	Get Int X
		Return _X
	End
	
	Get Int Y
		Return _Y
	End

	Final Var TrueCoords()
		Return Screen.AltRectData("COMBAT",X,Y,W,H)
	End
	
	
	Get Int TX
		Int RX
		Int RY
		Int RW
		Int RH
		RX,RY,RW,RH = TrueCoords()
		Return RX
	End
		
	Get Int TY
		Int RX
		Int RY
		Int RW
		Int RH
		RX,RY,RW,RH = TrueCoords()
		Return RY
	End
	
	Get Int TW
		Int RX
		Int RY
		Int RW
		Int RH
		RX,RY,RW,RH = TrueCoords()
		Return RW
	End
	
	Get Int TH
		Int RX
		Int RY
		Int RW
		Int RH
		RX,RY,RW,RH = TrueCoords()
		Return RH
	End

	Set Int TX
		Int RX
		Int RY
		RX,RY = Screen.TrueCoords("COMBAT",Value,0)
		X = RX
	End
	Set Int TY
		Int RX
		Int RY
		RX,RY = Screen.TrueCoords("COMBAT",0,Value)
		Y = RY
	End
#endregion

#region Draw and Pose
	
	Abstract Void Draw()
	Abstract Bool Pose(Action)
	
#endregion

#region StatusChanges	
	Final Var EachStatusChange()
		TrueStatusChanges = TrueStatusChanges || {}
		Var Tabel 
		Tabel = {}
		For k,v in pairs(TrueStatusChanges)
			If v
				Tabel += k
			end
		End
		Int i=0
		Var Ret()			
			i++
			if i>#Tabel
				return nil,nil
			end
			return Tabel[i],StatusChanges[Tabel[i]]
		End
		Return Ret
	End
#endregion

#region Quick Links
	Get Var Char
		Return RPGChar[CharTag]
	End
	
	Get Var Stat
		Return Char.Stat
	End
	
	Get Var Points
		Return Char.Points
	End
	
	Get Var Data
		Return Char.Data
	End
	
	Get Int HP
		Return Points.HP.Have
	End
	
	Get Int HPMax
		Return Points.HP.Maximum
	End
	
	Var EndStats
	
	Get String Name
		Return Char.Name
	End
	
	Abstract Int EleRes(string elem)
#endregion

#region Targetable
	Get Bool TargettableByHero
		Return HP>0 || Team=="Hero"
	End
	
	Get Bool TargettableByFoe
		Return HP>0
	End
	
	Void TOverview()
		Static var f = ImageFont.Obtain("MINITEXT")		
		int y=20
		for k,v in spairs(FlowCombat.PlayerInputTarget.Targeted)
			f.DarkText(sprintf("%20s => %5s (Can be targeted: %5s)",k,v,ByTag[k].TargettableByHero),3,y)
			y+=20
		end
	End
	
	Get Bool IsTargeted
		//ImageFont.Obtain("MINITEXT").Text(sprintf("Stage.Current: %s; PlayerInputTarget: %s; Targeted: %s",Stage.Current,FlowCombat.PlayerInputTarget,FlowCombat.PlayerInputTarget.Targeted),3,3) // Debug only!
		//ImageFont.Obtain("MINITEXT").Text(sprintf("Stage: %s; CanTarget: %s; Has List: %s",Stage.Current.RegName,Stage.Current.TargetMode,FlowCombat.PlayerInputTarget.Targeted!=nil),2,5)
		if (!Stage.Current.TargetMode) || (!FlowCombat.PlayerInputTarget.Targeted)
			Return False
		End
		//TOverview() // Debug only
		Return FlowCombat.PlayerInputTarget.Targeted[CharTag]
	End
	
	Get Bool ShowHPBar
		Return True
	End
	
	Get String TargetName
		Return sprintf("Lv %06d. %s",RPGChar[CharTag].Stats.Level,RPGChar[CharTag].Name)
	End
#endregion

#region Start Up

// First upper rest lower
	Static String FURL(string s)
		Switch s:upper()
			Case "HP" "AP" "EXP" 
				return s:upper()
			Default
				Return (Left(s,1):upper())..(Right(s,#s-1):lower())
		End
	End

	Void SetUp(string _Tag,string _Team)
		CharTag  = _Tag
		Team = _Team
		ByTag[Tag] = Self
		ByTeam[Team][Tag] = Self
		StatusChanges = {}
		
		Int _stat_index(s,string Key)
			return Char.Stat["END_"..FURL(Key)]
		End
		EndStats = Lua.setmetatable({},{["__index"]=_stat_index})
		CSayF("Created fighter '%s' for team: %s",_Tag,_Team)
	End
#endregion


	Static Void DrawAll(Bool AllowTarget)
		Static Var Fnt = ImageFont.Obtain("MINITEXT")
		For FTag,FDat in Pairs(ByTag)
			If FDat.DrawThis
				__White
				For k,d in FDat.EachStatusChange()
					If FDat.HP<=0
						FDat.StatusChanges[k]=nil
						Break
					ElseIf d
						Invoke(d.Draw,FDat)
					Else
						Printf("\007WARNING! DrawAll: nil for data received on status: %s\n",k)
					End
				End
				// CSayF("DEBUG> %s: Draw(%d,%d)  %dx%d",FTag,FDat.x,FDat.y,FDat.W,FDat.H) // DEBUG ONLY!!!
				FDat.Draw()
			End
		End
		For FTag,FDat in Pairs(ByTag)			
			If FDat.DrawThis && FDat.IsTargeted
				__White
				Int NY = Fdat.Y-(Fdat.W div 4)
				Int BY = NY+20
				//FitText.Dark(fnt,fdat.TargetName,Fdat.X,NY)
				fnt.DarkText(fdat.TargetName,Fdat.X,NY)
				if Fdat.ShowHPBar
					Int W = fnt.TextWidth(fdat.TargetName)
					Graphics.Color(80,80,80)
					Graphics.Rect(Fdat.X,BY,W,10)
					Number Breuk = Fdat.HP/Fdat.HPMax
					Int G=math.ceil(Breuk*255)
					Int B=math.ceil(Breuk*W)
					Graphics.Color(255-G,G,0)
					Graphics.Rect(fdat.X,BY,B,10)
				End
			End
		End
	End

End


Return Fighter