// License Information:
// src/Tricky Script/Script/Use/lnk.uwn/Elevator.neil
// Version: 23.04.24
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "Libs/LinkedList"

Class TKeyCard
	ReadOnly Int R
	ReadOnly Int G
	ReadOnly Int B
	ReadOnly String Name
	
	ReadOnly Static Var Lijst = New TLinkedList()
	
	Constructor(Int _R,Int _G, Int _B,String _N)
		CSay("Creating Keycard record: #%02x%02x%02x (%s)",_R,_G,_B,_N)
		R = _R
		G = _G
		B = _B
		Name=_N
	End
	
End

Module

	Constructor
		TKeyCard.Lijst.AddLast(New TKeyCard(255,  0,  0, "Red"))
		TKeyCard.Lijst.AddLast(New TKeyCard(  0,255,  0, "Green"))
		TKeyCard.Lijst.AddLast(New TKeyCard(  0,  0,255, "Blue"))
		TKeyCard.Lijst.AddLast(New TKeyCard(255,180,  0, "Amber"))
		TKeyCard.Lijst.AddLast(New TKeyCard(180,  0,255, "Purple"))
	End

	ReadOnly Var Yeah = Audio.LoadNew("Audio/SFX/Yeah.ogg","YEAH")

	Void GoElevator()
		State.LoadNew("FLOW_ELEVATOR","Script/Flow/FlowElevator.neil")
		Flow.Current="FLOW_ELEVATOR"
	End
	
	String KeyFloorTag(string Key)
		string L = Lnk.Map.Layer
		if Left(L,1)=="#"
			L = Right(L,#L-1)
		End
		return sPrintF("EFU_KEY_%s_%s",Key,L)
	End
	
	Get Bool Red
		Return gv.vBool[KeyFloorTag("RED")]
	End
	
	Get Bool Green
		Return gv.vBool[KeyFloorTag("GREEN")]
	End

	Get Bool Blue
		Return gv.vBool[KeyFloorTag("BLUE")]
	End
	
	Get Bool Amber
		Return gv.vBool[KeyFloorTag("AMBER")]
	End
	
	Get Bool Purple
		Return gv.vBool[KeyFloorTag("PURPLE")]
	End
	
	Set Bool Red
		 gv.vBool[KeyFloorTag("RED")] = Value
	End
	
	Set Bool Green
		 gv.vBool[KeyFloorTag("GREEN")] = Value
	End

	Set Bool Blue
		 gv.vBool[KeyFloorTag("BLUE")] = Value
	End
	
	Set Bool Amber
		 gv.vBool[KeyFloorTag("AMBER")] = Value
	End
	
	Set Bool Purple
		 gv.vBool[KeyFloorTag("PURPLE")] = Value
	End
				 
	Void CheckKey(string K)
		gv.vBool.CheckedKey = self[K]
	End
	
	Get Int Score
		Return math.max(gv.gint.EFU_Elevator_Key_Score,90 div __skill)
	End
	
	Set Int Score
		gv.gint.EFU_Elevator_Key_Score = math.min(Value,12000 div __skill)
		CSayF("Keycard Score set to: %d",Value)
	End
	
	
	Void GiveKey(string k)
		//Static Int Score = 90 div __skill
		Self[k] = true
		Yeah.Play()
		Lnk.Party.Score(Score)
		Switch __Skill
			case 1
				Score += math.min(Score,5000)
			case 2
				Score += 60
			case 3
				Score++
			Default
				Lua.Error("Key invalid skill")
		End
	End
	
	Void DrawKeys()
		static var KC = Image.LoadNew("GFX/Textures/EFU/Keycard.png","EFU_Keycard" )
		KC.HotCenter()
		int x = 10
		int y = 70
		for K in TKeyCard.Lijst.Each
			if self[K.Name]
				Graphics.Color(K.R,K.G,K.B)
				Graphics.Scale(1.25,1.25)
			Else
				Graphics.Color(K.R div 2,K.G div 2,K.B div 2)
				Graphics.Scale(1,1)
			End
			KC.Draw(x,y)
			x+=40
		End
		Graphics.Scale(1,1)
	End
		
				

End