// License Information:
// src/Tricky Script/Script/Use/Any.uwn/Resistance.neil
// Version: 22.09.01
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

// Resistance was a work name as originally only the status and elemental resistances were to be defined here.
// Figured it would be handier to put a few more things in this crap.
Module
	// None = Status changes that will always have to hit
	// Bio = Poison + Disease
	// Will = Confusion + Sleep
	// Stamina = Paralysis + Death
	
	
	ReadOnly Var StatusChanges = {"Poison","Disease","Fear","Silence","Sleep","Paralysis","Damned","Death"}
	ReadOnly Var Status = {"None","Bio","Will","Stamina"}
	ReadOnly Var Elements = {"None","Flame","Wind","Water","Earth","Frost","Thunder","Light","Darkness"}
	ReadOnly Var _Luck = {[0]="Worst",[1]="Bad",[2]="Normal",[3]="Good", [4]="Best"}
	ReadOnly Var _EResName = {[0]="Fatal",[1]="Very weak",[2]="Weak",[3]="--",[4]="Resistant",[5]="Immune",[6]="Aborb"}
	
	
	String Luck(L)
		switch(Lua.type(L))
			case "string"
				Return Luck(RPGChar[L].Stat.END_Luck)
			case "number"
				Return _Luck[math.floor(math.min(4,math.max(0,L)))]
			default
				Lua.error(sprintf("Lnk.Resistances.Luck(<%s>): Either a string or an integer number expected",Lua.type(L)))
		end
	End
	ReadOnly Var Stats = {"Power","Defense","Will","Resistance","Accuracy","Evasion","Speed","HP"}
	
	Int I_ERes(Int v)
		Return math.max(0,math.min(#_EResName,v))
	End
	
	String ERes(a,b)
		if Lua.type(a)=="number"
			Return _EResName[I_ERes(a)]
		elseif Lua.type(a)=="string" && Lua.type(b)=="string"
			Return ERes(RPGChar[a].Stat["END_ZER_"..b])
		else
			Lua.error("Ieelgal ERes function call")
			Return "ERROR"
		end
	End
	
	Void EResCol(a,b)
		if Lua.type(a)=="number"
			if a==3
				__White
			Else
				Int G = math.floor( (I_ERes(a)/6)*255)
				Graphics.Color(255-G,G,0)
			End	
		elseif Lua.type(a)=="string" && Lua.type(b)=="string"
			EResCol(RPGChar[a].Stat["END_ZER_"..b])
		else
			Lua.error("Ieelgal EResCall function call")
			Return
		end
	End
	
	Get Var AllStat
		Static Var _AS
		if !_AS
			CSayF("AllStat called for the first time, so I gotta generate this")
			Var wtab = { [Status]="ZSR_", [Elements]="ZER_", [Stats]=""}
			_AS={"AP"}
			for tabel,prefix in pairs(wtab)
				for s in each(tabel)
					_AS += sprintf("%s%s",prefix,s)
					CSayF("Added: [%02d] %s",#_AS,_AS[#_AS])
				end
			end
		end
		Return _AS
	End

End