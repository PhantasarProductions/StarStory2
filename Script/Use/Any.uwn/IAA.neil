// License Information:
// src/Tricky Script/Script/Use/Any.uwn/IAA.neil
// Version: 22.06.08
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
// Item Action Ability

Var Me
Var GData = GINIE.Obtain("INVENTORY")
Var IAA_Class = GINIE.LoadNew("Data/IAA/MyData_ClassFile_IAA.Ini","IAA_CLASS")

Table IAA_Data

//Class True_IAA
//End


QuickMeta ItemSlot
	index
		Lua.assert(Lua.type(key)=="number","Item slot index must be a number!")
		Lua.assert(key>=1 && key<=Any.Caps.InvItemSlots,sprintf("Item slot #%d is out of bounds",key))
		string slottag = sprintf("SLOT%03d",key)
		string itm = GData.Value(slottag,"Item")
		int num = Lua.tonumber(GData.Value(slottag,"Numb")) || 0
		//return itm,num
		return Itm
	end
	
	newindex
		Lua.assert(Lua.type(key)=="number","Item slot index must be a number!")
		Lua.assert(key>=1 && key<=Any.Caps.InvItemSlots,sprintf("Item slot #%d is out of bounds",key))
		string slottag = sprintf("SLOT%03d",key)
		switch Lua.type(value)
			case "string"
				GData.Value(slottag,"Item",value)
			case "number"
				GData.Value(slottag,"Numb",sprintf("%d",math.floor(math.max(0,math.min(Any.Caps.InvItemsPerSlot,value)))))
			case "table"
				ItemSlot[key] = value[1]
				ItemSlot[key] = value[2]
			default
				Lua.error("ItemSlot cannot handle types of type "..Lua.type(value))
		end
	end
End	
	

QuickMeta ItemNum
	index
		Lua.assert(Lua.type(key)=="number","Item slot index must be a number!")
		Lua.assert(key>=1 && key<=Any.Caps.InvItemSlots,sprintf("Item slot #%d is out of bounds",key))
		string slottag = sprintf("SLOT%03d",key)
		//string itm = GData.Value(slottag,"Item")
		int num = Lua.tonumber(GData.Value(slottag,"Numb")) || 0
		return num
	end
	newindex
		Lua.assert(Lua.type(key)=="number","Item slot index must be a number!")
		Lua.assert(key>=1 && key<=Any.Caps.InvItemSlots,sprintf("Item slot #%d is out of bounds",key))
		Lua.assert(Lua.type(value)=="number","Itemnum requires a numberic value!")
		string slottag = sprintf("SLOT%03d",key)
		GData.Value(slottag,"Numb",sprintf("%d",math.floor(math.max(0,math.min(Any.Caps.InvItemsPerSlot,value)))))
	end
End

Bool Give(String Item,Int N=1,CheckOnly)
	Item=Item:upper()
	int i=0
	Repeat
		i++
		if ItemSlot[i]==Item && ItemNum[i]+N<=Any.Caps.InvItemsPerSlot
			if !CheckOnly
				ItemNum[i]++			
				Lua.Neil.Globals.Any.IAA[Item].Given++
			End
			Return True
		End
	LoopWhile i<Any.Caps.InvSlots
	i=0
	Repeat
		i++
		if ItemNum[i]==0
			if !CheckOnly
				ItemSlot[i]=Item
				ItemSlot[i]=N
				Lua.Neil.Globals._module_IAA[Item].Given++
			end
			Return True
		End
	LoopWhile i<Any.Caps.InvSlots
	Return False	
	//Lua.error("ITEM GIVE routine not yet scripted!")
End

string Explanation(string itg,int t=2)
	Var It = Me[itg]
	switch t
		case 0
			return sprintf("%s\n$s",Explanation(1),Explanation(2))
		case 1
			return IT.Desc
		case 2
			string ret = ""
			if IT.Type=="Item"
				String T = IT.Item_Type
				If T==""
					T = "Consumable"
				End
				ret = sprintf("Type: %s\n",T)
			end
			if IT.Type=="Ability" || IT.Item_Type=="Consumable" || IT.Item_Type==""
				ret += sprintf("Target: %s\n",IT.Target)
			End
			if IT.Attack>0
				string d
				Switch IT.Attack_Type
					case "Absolute"
						d = sprintf("%d points",IT.Attack)
					case "PercentHP"
						d = sprintf("%d%% of max HP",IT.Attack)
					case "PercentStat"
						d = sprintf("%d%% of %s",IT.Attack,IT.Attack_OffenseStat)					
					case "BattleStat"
						d = sprintf("[diceroll %d%% of user's %s against target's %s]",IT.Attack,IT.Attack_OffenseStat,IT.Attack_DefenseStat)
					default
						d= "????"
				end
				Switch IT.Attack_Element
					case "Healing"
						ret += sprintf("Heals %s\n",d)
					case "DarkHealing"
						ret += sprintf("Heals %s (but can be fatal to non-dark creatures)\n",d)
					case "None"
						ret += sprintf("Deals %s damage\n",d)
					default
						ret += sprintf("Deals %s %s damage\n",d,IT.Attack_Element)
				End
			End
			For s in each(Any.Resistance.StatusChanges)
				Switch s
					case "Death"
						if IT.Cause_Death
							ret += "May KO target instantly\n"
						end
					Default
						if IT["Cause_"..s]
							ret += sprintf("Causes %s\n",s)
						end
						if IT["Cure_"..s]
							ret += sprintf("Cures %s\n",s)
						end
				End
			End		
			if IT.ADDCARD_Char_Number>0
				ret += sprintf("Target gains %d action bubbles (interval %d)\n",IT.ADDCARD_Char_Number,IT.ADDCARD_Char_Interval)
			end
			if IT.ADDCARD_Action_Number>1
				if IT.ADDCARD_Action_Act=="Self"
					ret += sprintf("Will place %d bubbles to repeat itself (interval %d)\n",IT.ADDCARD_Action_Number,IT.ADDCARD_Action_Interval)
				Else
					ret += sprintf("Will place %d bubbles containing the action '%s' (interval %d)\n",IT.ADDCARD_Action_Number,Any.IAA[IT.AddCard_Action_Act],IT.ADDCARD_Action_Interval)
				end
			ElseIf IT.ADDCARD_Action_Number==1	
				If IT.ADDCARD_Action_Act=="Self"
					ret += sprintf("Will place an extra bubble to repeat itself (spot #%d)\n",IT.ADDCARD_Action_Interval)
				Else
					ret += sprintf("Will place a bubble containing the action '%s' (spot #%d)\n",IT.ADDCARD_Action_Number,Any.IAA[IT.AddCard_Action_Act],IT.ADDCARD_Action_Interval)
				End
			End
			Return ret
		Default
			Lua.error(sprintf("I do not know how to explain with type %s!",t))
	end
end


Var GetIAA(String F)
	string Rec="REC:"..F
	Var Data = GINIE.LoadNew("Data/IAA/"..F..".INI",Rec)
	Var GIndex(s,String Key)
		Key = Key:upper()
		Switch(Key)
			Case "TAG"
				return F:upper()
			Case "GIVE"
				Return Give(F)
			case "CANGIVE"
				// Second parameter true will only make the checkups, but won't do the actual giving
				Return Give(F,1,true)
			Case "GIVEN"
				Return GData.NValue("Given",F)
			Case "NUM"
				Return ItemNum
			Case "EXPLAIN"
				Return Explanation(F)
			Case "EXPLAINTABLE"
				return Split(Explanation(F),"\n")
			Case "SELLPRICE" "SELL_PRICE"
				Int BuyPrice = ME[F].Shop_Price
				Switch __Skill
					Case 1
						Return BuyPrice
					Case 2
						Return math.ceil(BuyPrice * 0.75)
					Case 3
						Return math.max(1,BuyPrice Div 5)
					default
						Return 0
				End				
			Case "NAME"
				return Data.Value(Rec,"Title")
			Default
				Switch IAA_Class.Value("CLASS",Key):upper()
					Case "STRING"
						return Data.Value(Rec,Key)
					Case "INT" "NUMBER"
						return Lua.tonumber(DATA.Value(Rec,Key)) || 0
					Case "BOOLEAN"
						return Data.Value(Rec,Key):upper()=="TRUE"
					Case ""
						Lua.error("IAA record does not have field: "..key)
					Default
						Lua.error("IAA: I do not know how to handle MyData field: "..key..". Type unknown: ".. IAA_Class.Value("CLASS",Key))
				End
		End
	End
	Void GNewIndex(s,String k,Value)
		String Key = K:upper()
		Switch(Key)
			case "GIVEN"
				GData.Value("Given",F,Lua.tostring(Value))
			Default
				Lua.Error("Any.IAA."..k.." is read-only")
		End
	end
	return Lua.setmetatable({},{["__index"]=GIndex,["__newindex"]=GNewIndex})
End

global const int IAAEX_full    = 0
global const int IAAEX_desc    = 1
global const int IAAEX_details = 2



QuickMeta _module_IAA
	index
		Key = Key:upper()
		Switch Key
			Case "HELLO"
				// This can be used by a few routines to enforce this
				// Module to load. This one in particular can 
				// Slow things down.
				Return NIKS
			Case "SLOT" "INVENTORYSLOT" "ITEMSLOT"
				Return ItemSlot
			Case "SLOTNUM"
				Return ItemNum			
			Case "GIVE"
				Return Give
			Default
				// Get item
				IAA_Data[Key] = IAA_Data[Key] || GetIAA(Key)
				Return IAA_Data[Key]
		End
	end
End




Init
	IAA_Data = {}
	If GData.Value("ALGEMEEN","SETUP")!="SET"
		CSay "First time the items system is used, so let's set the first values" 
		ItemSlot[1]="ITM_ADHBANDAGE"
		ItemSlot[1]=12 div __skill
		ItemSlot[2]="ITM_BANDAGE"
		ItemSlot[2]=6 div __skill
		GData.Value("ALGEMEEN","SETUP","SET")
	End
	Me = _module_IAA
End

Return _module_IAA