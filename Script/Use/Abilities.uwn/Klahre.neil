// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Use/Abilities.uwn/Klahre.neil
// (c) Jeroen Broks, 2022, 2023, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 23.05.02
// End License Information

#use "libs/fittext"

Class TARM
	Static ReadOnly Var Stuff = GINIE.CreateNew("KLAHRE_ARMS")
	Static Var _TrueList
	Static Get Table List
		_TrueList = _TrueList || Stuff.ListCopy("LISTS","ARMSGATHERED")
		Return _TrueList
	End
	
	readonly string Tag
	readonly var ARM
	
	get var PAmmo
		return RPGChar.Klahre.Points[sprintf("ZZ_ARM_AMMO_%s",Tag:upper())]
	end
	
	get int AmmoMax
		return PAmmo.Maximum
	End
	Set Int AmmoMax
		PAmmo.Maximum = Value
	End
	get int Ammo
		return PAmmo.Have
	End
	Set Int Ammo
		PAmmo.Have = Value
	End
	
	Get Int Hit
		Return math.min(100,math.max(ARM.ARM_Init_Hit,Lua.tonumber(Stuff.Value(Tag,"Hit"))||1))
	End
	
	Set Int Hit
		Stuff.Value(Tag,"HIT",Lua.tostring(math.min(Value,100)))
	End
	
	Get Int XPower
		Int Ret = Lua.tonumber(Stuff.Value(Tag,"XPower")) || 0
		//CSayF("XPOWER RETURNS %d",ret) // debug only
		Return Ret
	End
	Set Int XPower
		Stuff.Value(Tag,"XPower",Lua.tostring(Value))
	End
	
	Get Int XRepeat
		Int Ret = Lua.tonumber(Stuff.Value(Tag,"XRepeat")) || 0
		Return Ret
	End
	Set Int XRepeat
		Stuff.Value(Tag,"XRepeat",Lua.tostring(Value))
	End
	
	Get Int CostHit
		Return math.max(ARM.ARM_Cost_Hit,Lua.tonumber(Stuff.Value(Tag,"Cost_Hit"))||1)
	End
	Set Int CostHit
		Stuff.Value(Tag,"Cost_HIT",Lua.tostring(Value))
	End
	Get Int CostAmmoMax
		Return math.max(ARM.ARM_Cost_Ammo,Lua.tonumber(Stuff.Value(Tag,"Cost_Ammo"))||1)
	End
	Set Int CostAmmoMax
		Stuff.Value(Tag,"Cost_Ammo",Lua.tostring(Value))
	End
	Get Int CostXPower
		Return math.max(ARM.ARM_Cost_XPower,Lua.tonumber(Stuff.Value(Tag,"Cost_XPower"))||0)
	End
	Set Int CostXPower
		Stuff.Value(Tag,"Cost_XPower",Lua.tostring(Value))
	End
	Get Int CostXRepeat
		Return math.max(ARM.ARM_Cost_XRepeat,Lua.tonumber(Stuff.Value(Tag,"Cost_XRepeat"))||0)
	End
	Set Int CostXRepeat
		Stuff.Value(Tag,"Cost_XRepeat",Lua.tostring(Value))
	End
	
	Constructor(string _Tag)
		Tag = _Tag:upper()
		ARM = any.iaa[Tag]		
		AmmoMax = math.max(ARM.ARM_Init_Ammo,AmmoMax) 
		Ammo = AmmoMax
		Lua.assert(ARM,sprintf("Any.IAA['%s'] appears to have returned 'nil' for some odd reason.",Tag))
	End
End

Module
	ReadOnly Var Fnt = ImageFont.Obtain("BOXTEXT")
	ReadOnly Var DFt = ImageFont.Obtain("MINITEXT")
	ReadOnly Var ARM
	ReadOnly Var ARM_MAP

	Get Var Stuff
		Return TARM.Stuff
	End
	
	Bool HasArm(string _ARM)
		return Stuff.ListHas("LISTS","ARMSGATHERED",_ARM,true)
	End
	
	Void Add(string _ARM)
		_ARM = _ARM:upper()
		if (!Prefixed(_ARM,"ARM_"))
			_ARM="ARM_".._ARM
		End
		CSayF("Request to add ARM: %s",_ARM)
		If HasARM(_ARM)
			CSay("Rejected! ARM is already there!")
			Return
		End
		Stuff.Add("LISTS","ARMSGATHERED",_ARM)
		TARM._TrueList = nil
		CSay("Added")
	End
	
	Void AllowRachel()
		gv.gBool.AllowRachel = Stuff.Count("LISTS","ARMSGATHERED")>=13
		CSayF("ARMS gathered: %02d! Rachel allowed: %s",Stuff.Count("LISTS","ARMSGATHERED"),Lua.tostring(gv.gBool.AllowRachel))		
	End
			
	
	Link GetARMEXP = gv.gint.KLAHRE_ARM_EXPERIENCE
	
	// Difference is that this function makes Klahre announce it to the player
	// And reject the ARM if the leader is not Klahre
	Void Obtain(string _ARM)
		String Lead = Lua.Neil.Globals.FlowField.FollowTheLeader.LeaderTag
		If HasARM(_ARM)
			Lnk.BoxText.Serial("ARM","ALREADY_HAVE")
		ElseIf Lead=="Klahre"
			gv.gstr.ARMOBTAINED = any.IAA[_ARM].TITLE
			Lnk.BoxText.Serial("ARM","YES")
			Self.GetARMEXP += 25
			RPGChar.Klahre.Points.EXP.Have += Self.GetARMEXP
			Lua.Neil.Globals.FlowField.Map.CurLayer.Obj(_ARM).Texture="GFX/Treasure/ARMS_Chest_Open.png"
			Add(_ARM)
			TARM._TrueList = nil
		Else
			Lnk.BoxText.Serial("ARM","NO_"..Lead:upper())
		End
	End
	
	Void ObtainArkSmash()
		For i,ta in ipairs(TARM.List)
			var a = ARM[ta]
			if __skill==1 
				a.XRepeat++
			end
			a.XPower+=4-__skill
			a.AmmoMax+=3-__skill
			a.Hit+=12 div __skill			
		End
		Self.GetARMEXP += 50
		RPGChar.Klahre.Points.EXP.Have += Self.GetARMEXP
		Stuff.Add("LISTS","ARMSGATHERED","ARM_ARKSMASH")
		TARM._TrueList = nil
		//ARM_MAP.ARM_ARKSMASH || new TARM("ARM_ARKSMASH")
	End
	
	Get Int MX
		Return Any.Mouse.MX
	End
	Get Int MY
		Return Any.Mouse.MY
	End
	Get Bool ML
		Return Any.Mouse.ML
	End
	
	Delegate Action = NIKS

	Void View(ubox,upgrading)
		Int BX = ubox.x+5
		Int BY = ubox.Y+5
		Int EX = (ubox.x+ubox.w)-10
		Int EY = (ubox.y+ubox.h)-10
		Int MX = Any.Mouse.MX
		Int MY = Any.Mouse.MY
		Int HX = 0
		Int Hover = 0
		For i,at in ipairs(TARM.List)
			var a = ARM[at]
			int IY = BY+(i*30)
			If MY>IY && MX>BX && MX<EX && MY<IY+30
				Hover = i
			End
			__White
			fnt.Dark(a.ARM.Title,BX+HX,IY)
			__SkyBlue
			fnt.Dark(sprintf("%2d/%2d",a.Ammo,a.AmmoMax),EX-HX,IY,1)
		End
		If Hover>0
			Var AR = ARM[TARM.List[Hover]]			
			String ITg = AR.Tag 
			Var IT = any.iaa[ITg]
			//Lua.assert(ITg!="",sprintf("Hovering slot #%d gives no an empty string",Hover))
			Int X=MX+10
			Int Y=MY+15
			var Ex = IT.ExplainTable
			String Updates = sprintf("Extra Power: %d; Repeat: %d; Hit: %03d%%",AR.XPower,AR.XRepeat,AR.Hit)
			Int W=math.max(Fnt.TextWidth(IT.Title),DFt.TextWidth(Updates))			
			w = math.max(Dft.TextWidth(IT.Desc),w)
			For i,e in ipairs(EX)
				W=math.max(W,DFt.TextWidth(e))
			End			
			W+=8
			__Black
			Graphics.Alpha(120)
			Graphics.Rect(math.max(math.min(X-(W div 2),Screen.W-W),0),Y,W,50+(#EX*20))
			Graphics.Alpha(255)
			__SkyBlue
			FitText.Dark(Fnt,IT.Title,X,Y,2)
			__Ember
			FitText.Dark(DFt,IT.Desc,X,(Y+30),2)
			Graphics.Color(180,255,0)
			FitText.Dark(Dft,Updates,X,(Y+60),2)
			__White
			For i,e in ipairs(EX)
				FitText.Dark(DFt,e,X,(Y+60)+(i*20),2)
			End
			If ML
				//UseItem(FMChar,Hover,ITg)
				Action(Itg,ARM[ITg])
			End
		End
	End
	
	Constructor
		Lnk.BoxText.Load("ARM","ARM")
		Add("Dart")
		Add("HealingSpray")
		ARM_MAP = {}
		Var MIDX(S,string key)
			key=key:upper()
			ARM_MAP[key] = ARM_MAP[Key] || new TARM(key)
			Return ARM_MAP[key]
		End
		ARM = Lua.setmetatable({},{["__index"] = MIDX})
	End
End