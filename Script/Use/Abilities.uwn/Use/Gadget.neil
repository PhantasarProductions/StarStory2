// License Information:
// src/Tricky Script/Script/Use/Abilities.uwn/Use/Gadget.neil
// Version: 22.08.03
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#use "Libs/LinkedList"


QuickMeta GPU_Pic
	Index
		Static Var Pics
		Pics = Pics || {}
		Key = Key:upper()
		Pics[Key] = Pics[Key] || Image.LoadNew("GFX/Gadget/"..key..".bmp","GADGET_POWERUP_"..Key)
		Return Pics[Key]
	End
End


Class Gadget_Item
	ReadOnly Var Parent
	ReadOnly String ATag	
	Get String Exe
		Return Parent.Tag
	End
	Get Var Abl
		Return Any.IAA["ABL_"..Exe.."_"..ATag]
	End
	Get Bool Unlocked
		If ATag:upper()=="ZTRANSFER"
			Return RPGParty[3]=="Doctor"
		End
		Return Parent.Stuff.Value("Unlocked",atag):upper()=="TRUE"
	End
	Get String Name
		Return Abl.Name
	End
	Get Int EP_Cost
		String T = "APCOST_"..Exe
		If Parent.Stuff.Value("EP_Cut",atag):upper()=="TRUE"
			Switch __Skill
				case 1
					return math.max(Abl[T] div 4,1)
				case 2
					return math.max(Abl[T] div 2,1)
				case 3
					return math.max(math.ceil(ABL[T] * 0.75),1)
				default
					return 123456789
			end
		else
			return Abl[T]
		End
	End
	
	Get Bool AllowSpread
		Return Abl.AllowPowerUp_Spread
	End
	Get Bool Spread
		Return AllowSpread && Parent.Stuff.Value("Spread",atag):upper()=="TRUE"
	End
	Bool SelectedSpread = False
	
	Get Bool AllowDouble
		Return Abl.AllowPowerUp_DBLPower
	End
	Get Bool Double
		Return AllowDouble && Parent.Stuff.Value("Double",atag):upper()=="TRUE"
	End
	Bool SelectedDouble
	
	Get Int AllowXCards
		Return math.min(30 div __skill,Abl.AllowPowerup_ExtraCards)
	End
	Get Int XCards
		Return math.min(AllowXCards,Parent.Stuff.NValue("XCards",atag))
	End
	Int SelectedXCards
	
	
	Constructor(_ouwe,_tag,_unlockedfromstart)
		Parent = _ouwe
		ATag   = _tag
		If _unlockedfromstart
			Parent.Stuff.Value("Unlocked",_tag,"TRUE")
		End
		CSayF("Added %s to character %s. Unlocked from start is %s. Actually unlocked is %s",ATag,Exe,_unlockedfromstart,Unlocked)
	End
End

Class Gadget_Class
	ReadOnly String Tag
	ReadOnly Var Stuff 
	ReadOnly Var Items
	Static Get Int MX
		return Any.Mouse.MX
	End
	Static Get Int MY
		return Any.Mouse.MY
	End
	Static Get Bool ML
		Return Any.Mouse.ML
	End
	
	static var fnt = ImageFont.Obtain("BOXTEXT")
	
	var SelectedItem=nil
	Int TS
	
	Void ShowAll(ubox,Situation)
		Int BX = ubox.x + 10
		Int BY = ubox.y + 10
		Int CY = BY		
		Int EX = BX + (ubox.w-20)
		Int EY = BY + (ubox.y-20)
		For GI in Items.Each
			Int HX = 0
			If Any.Mouse.MX>BX && Any.Mouse.MX<EX && Any.Mouse.MY>CY && Any.Mouse.MY<CY+30
				HX = 20
				If Any.Mouse.ML && GI.Unlocked
					SelectedItem = GI
					TS = os.time()
				End
			End
			Int CX = BX + HX			
			If GI.Unlocked
				__White
				Fnt.Text(GI.Name,CX,CY)
				__Yellow
				Fnt.Text(""..GI.EP_Cost,EX,CY,1)
			Else
				Graphics.Color(100,100,100)
				Fnt.Text("---",CX,CY)
			End
			CY += 30
		End
	End
	
	Void ShowItem(ubox,Situation)
		Int BX = ubox.x + 10
		Int BY = ubox.y + 10
		Int EX = BX + (ubox.w-20)
		Int EY = BY + (ubox.h-20)
		int BW = EX-BX
		If Any.Mouse.MR || math.abs(os.time()-TS)>5 || (!SelectedItem)
			CSayF("Unselect. Any of these was true: MR%sTM%s(%d);SINil%s",Any.Mouse.MR , math.abs(os.time()-TS)>5,math.abs(os.time()-TS), (!SelectedItem))
			SelectedItem=nil
			return			
		End
		TS = os.time()
		__White
		Fnt.Text(SelectedItem.Name,BX,BY)
		__Yellow
		Fnt.Text(""..SelectedItem.EP_Cost,EX,BY,1)
		If SelectedItem.AllowSpread
			GPU_Pic[sprintf("Spread_%s",SelectedItem.Spread)].Draw(BX,BY+60)
		End
		If SelectedItem.AllowDouble
			GPU_Pic[sprintf("2x Power_%s",SelectedItem.Spread)].Draw(BX+(ubox.w div 2),BY+60)
		End
		For i=1,SelectedItem.AllowXCards
			int i2 = i-1
			GPU_Pic[sprintf("+%02d Cards_%s",i,SelectedItem.XCards>=i)].Draw(BX+((i2 div 15)*(BW div 2)),BY+120+((i2 % 15)*30))
		End
		// Okay
		Int CanX = BX+10
		if prefixed(Situation:upper(),"COMBAT")
			Static Var Okay = GPU_Pic["Okay_True"]
			Int OkX = BX
			Int OkY = EY - Okay.Height
			Okay.Draw(OkX,OkY)
			CanX += Okay.Width + 10
		End
		Static Var Cancel = GPU_Pic["Cancel_True"]
		Int CanY = EY - Cancel.Height
		Cancel.Draw(CanX,CanY)
		//CSayF("%s/%d/%d",ML,MX,MY) // debug only
		if ML && MX>CanX && MY>CanY && MX<CanX+Cancel.Width && MY<EY
			CSay("Click on cancel button!")
			SelectedItem=nil
		End
	End
	
	Void Show(ubox,Situation)
		If SelectedItem
			ShowItem(ubox,situation)
		Else
			ShowAll(ubox,situation)
		End
	End
	
	
	Constructor(string _T,Table A)
		Tag = _T
		Stuff = GINIE.CreateNew(sprintf("%s_GADGET",_T:upper()))
		Items = New LinkedList()
		For k,v in sPairs(A)
			Items.AddLast(new Gadget_Item(Self,k,v))
		End
	End
End


Return Gadget_Class